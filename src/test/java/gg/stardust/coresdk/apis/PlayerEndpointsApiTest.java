/*
 * Stardust API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package gg.stardust.coresdk.apis;

import gg.stardust.coresdk.models.Empty;
import gg.stardust.coresdk.models.Error;
import gg.stardust.coresdk.models.SDPlayerCountResponse;
import gg.stardust.coresdk.models.SDPlayerCreateRequest;
import gg.stardust.coresdk.models.SDPlayerCreateResponse;
import gg.stardust.coresdk.models.SDPlayerGetAllResponses;
import gg.stardust.coresdk.models.SDPlayerGetIdResponse;
import gg.stardust.coresdk.models.SDPlayerGetIdsResponses;
import gg.stardust.coresdk.models.SDPlayerGetInventoryResponses;
import gg.stardust.coresdk.models.SDPlayerGetResponse;
import gg.stardust.coresdk.models.SDPlayerMutateRequest;
import gg.stardust.coresdk.models.SDPlayerWalletGetResponse;
import gg.stardust.coresdk.models.SDPlayerWithdrawRequest;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for PlayerEndpointsApi
 */
@Ignore
public class PlayerEndpointsApiTest {

    private final PlayerEndpointsApi api = new PlayerEndpointsApi();

    /**
     * Get Player Count
     *
     * Get Player count within a game
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void playerCountGetTest() throws Exception {
        SDPlayerCountResponse response = api.playerCountGet();

        // TODO: test validations
    }
    /**
     * Create Player
     *
     * Create a Player for a game. Returns their player id which can be used to reference them later in Stardust&#x27;s system
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void playerCreatePostTest() throws Exception {
        SDPlayerCreateRequest body = null;
        SDPlayerCreateResponse response = api.playerCreatePost(body);

        // TODO: test validations
    }
    /**
     * Get All Players
     *
     * Get the List of All Players in Game
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void playerGetAllGetTest() throws Exception {
        String start = null;
        String filter = null;
        String limit = null;
        SDPlayerGetAllResponses response = api.playerGetAllGet(start, filter, limit);

        // TODO: test validations
    }
    /**
     * Get Player
     *
     * Get Details of a Player Within a Game
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void playerGetGetTest() throws Exception {
        String playerId = null;
        SDPlayerGetResponse response = api.playerGetGet(playerId);

        // TODO: test validations
    }
    /**
     * Get Player ID
     *
     * Get a Player&#x27;s ID via their Unique ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void playerGetIdGetTest() throws Exception {
        String uniqueId = null;
        SDPlayerGetIdResponse response = api.playerGetIdGet(uniqueId);

        // TODO: test validations
    }
    /**
     * Get All Player IDs
     *
     * Get All Player IDs for a Given Game
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void playerGetIdsGetTest() throws Exception {
        SDPlayerGetIdsResponses response = api.playerGetIdsGet();

        // TODO: test validations
    }
    /**
     * Get Player Inventory
     *
     * Get a players inventory and all the items it holds
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void playerGetInventoryGetTest() throws Exception {
        String playerId = null;
        String start = null;
        String tokenIds = null;
        String limit = null;
        SDPlayerGetInventoryResponses response = api.playerGetInventoryGet(playerId, start, tokenIds, limit);

        // TODO: test validations
    }
    /**
     * Mutate Player
     *
     * Change player data
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void playerMutatePutTest() throws Exception {
        SDPlayerMutateRequest body = null;
        Empty response = api.playerMutatePut(body);

        // TODO: test validations
    }
    /**
     * Remove Player
     *
     * Removes (hides) a player from your game. This is not permanent.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void playerRemoveDeleteTest() throws Exception {
        String playerId = null;
        Empty response = api.playerRemoveDelete(playerId);

        // TODO: test validations
    }
    /**
     * Get Player Wallet
     *
     * Get player&#x27;s wallet within a game
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void playerWalletGetGetTest() throws Exception {
        String playerId = null;
        SDPlayerWalletGetResponse response = api.playerWalletGetGet(playerId);

        // TODO: test validations
    }
    /**
     * Withdraw From Player
     *
     * Withdraw a Player&#x27;s Tokens from their Stardust Wallet
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void playerWithdrawPostTest() throws Exception {
        SDPlayerWithdrawRequest body = null;
        Empty response = api.playerWithdrawPost(body);

        // TODO: test validations
    }
}
