/*
 * Stardust API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package gg.stardust.coresdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import gg.stardust.coresdk.models.SDPlayerWalletGetResponseMonies;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
/**
 * SDPlayerWalletGetResponseWallet
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-09T11:52:00.026066-08:00[America/Los_Angeles]")
public class SDPlayerWalletGetResponseWallet implements Serializable{
  private static final long serialVersionUID = 1L;
  @SerializedName("blockchain")
  private String blockchain = null;

  @SerializedName("address")
  private String address = null;

  @SerializedName("monies")
  private List<SDPlayerWalletGetResponseMonies> monies = null;

  public SDPlayerWalletGetResponseWallet blockchain(String blockchain) {
    this.blockchain = blockchain;
    return this;
  }

   /**
   * The name of the blockchain
   * @return blockchain
  **/
  @Schema(required = true, description = "The name of the blockchain")
  public String getBlockchain() {
    return blockchain;
  }

  public void setBlockchain(String blockchain) {
    this.blockchain = blockchain;
  }

  public SDPlayerWalletGetResponseWallet address(String address) {
    this.address = address;
    return this;
  }

   /**
   * The players blockchain Address
   * @return address
  **/
  @Schema(required = true, description = "The players blockchain Address")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public SDPlayerWalletGetResponseWallet monies(List<SDPlayerWalletGetResponseMonies> monies) {
    this.monies = monies;
    return this;
  }

  public SDPlayerWalletGetResponseWallet addMoniesItem(SDPlayerWalletGetResponseMonies moniesItem) {
    if (this.monies == null) {
      this.monies = new ArrayList<SDPlayerWalletGetResponseMonies>();
    }
    this.monies.add(moniesItem);
    return this;
  }

   /**
   * An array of the players balances on a given blockchain
   * @return monies
  **/
  @Schema(description = "An array of the players balances on a given blockchain")
  public List<SDPlayerWalletGetResponseMonies> getMonies() {
    return monies;
  }

  public void setMonies(List<SDPlayerWalletGetResponseMonies> monies) {
    this.monies = monies;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SDPlayerWalletGetResponseWallet sdPlayerWalletGetResponseWallet = (SDPlayerWalletGetResponseWallet) o;
    return Objects.equals(this.blockchain, sdPlayerWalletGetResponseWallet.blockchain) &&
        Objects.equals(this.address, sdPlayerWalletGetResponseWallet.address) &&
        Objects.equals(this.monies, sdPlayerWalletGetResponseWallet.monies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockchain, address, monies);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SDPlayerWalletGetResponseWallet {\n");
    
    sb.append("    blockchain: ").append(toIndentedString(blockchain)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    monies: ").append(toIndentedString(monies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
