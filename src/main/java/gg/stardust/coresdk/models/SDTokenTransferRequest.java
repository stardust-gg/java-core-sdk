/*
 * Stardust API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package gg.stardust.coresdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import gg.stardust.coresdk.models.SDTokenBurnRequestTokenObjects;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
/**
 * SDTokenTransferRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-09T11:52:00.026066-08:00[America/Los_Angeles]")
public class SDTokenTransferRequest implements Serializable{
  private static final long serialVersionUID = 1L;
  @SerializedName("fromPlayerId")
  private String fromPlayerId = null;

  @SerializedName("toPlayerId")
  private String toPlayerId = null;

  @SerializedName("tokenObjects")
  private List<SDTokenBurnRequestTokenObjects> tokenObjects = new ArrayList<SDTokenBurnRequestTokenObjects>();

  public SDTokenTransferRequest fromPlayerId(String fromPlayerId) {
    this.fromPlayerId = fromPlayerId;
    return this;
  }

   /**
   * The Player&#x27;s id, can be found with Player/getId(s). (ex. CzySggxVQz51jciGRFDY7d5BER2fav6TNEnPGjusPJPd)
   * @return fromPlayerId
  **/
  @Schema(required = true, description = "The Player's id, can be found with Player/getId(s). (ex. CzySggxVQz51jciGRFDY7d5BER2fav6TNEnPGjusPJPd)")
  public String getFromPlayerId() {
    return fromPlayerId;
  }

  public void setFromPlayerId(String fromPlayerId) {
    this.fromPlayerId = fromPlayerId;
  }

  public SDTokenTransferRequest toPlayerId(String toPlayerId) {
    this.toPlayerId = toPlayerId;
    return this;
  }

   /**
   * The Player&#x27;s id, can be found with Player/getId(s). (ex. 53ywNSVp46QpiA6S86DLLfeKVfjcSAFxHR2L9j8tnte2)
   * @return toPlayerId
  **/
  @Schema(required = true, description = "The Player's id, can be found with Player/getId(s). (ex. 53ywNSVp46QpiA6S86DLLfeKVfjcSAFxHR2L9j8tnte2)")
  public String getToPlayerId() {
    return toPlayerId;
  }

  public void setToPlayerId(String toPlayerId) {
    this.toPlayerId = toPlayerId;
  }

  public SDTokenTransferRequest tokenObjects(List<SDTokenBurnRequestTokenObjects> tokenObjects) {
    this.tokenObjects = tokenObjects;
    return this;
  }

  public SDTokenTransferRequest addTokenObjectsItem(SDTokenBurnRequestTokenObjects tokenObjectsItem) {
    this.tokenObjects.add(tokenObjectsItem);
    return this;
  }

   /**
   * An array of objects of which tokens to transfer (ex. [{tokenId: 5, amount: \&quot;3\&quot;}])
   * @return tokenObjects
  **/
  @Schema(required = true, description = "An array of objects of which tokens to transfer (ex. [{tokenId: 5, amount: \"3\"}])")
  public List<SDTokenBurnRequestTokenObjects> getTokenObjects() {
    return tokenObjects;
  }

  public void setTokenObjects(List<SDTokenBurnRequestTokenObjects> tokenObjects) {
    this.tokenObjects = tokenObjects;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SDTokenTransferRequest sdTokenTransferRequest = (SDTokenTransferRequest) o;
    return Objects.equals(this.fromPlayerId, sdTokenTransferRequest.fromPlayerId) &&
        Objects.equals(this.toPlayerId, sdTokenTransferRequest.toPlayerId) &&
        Objects.equals(this.tokenObjects, sdTokenTransferRequest.tokenObjects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromPlayerId, toPlayerId, tokenObjects);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SDTokenTransferRequest {\n");
    
    sb.append("    fromPlayerId: ").append(toIndentedString(fromPlayerId)).append("\n");
    sb.append("    toPlayerId: ").append(toIndentedString(toPlayerId)).append("\n");
    sb.append("    tokenObjects: ").append(toIndentedString(tokenObjects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
