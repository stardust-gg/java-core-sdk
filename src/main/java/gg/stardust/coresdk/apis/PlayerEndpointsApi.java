/*
 * Stardust API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package gg.stardust.coresdk.apis;

import gg.stardust.coresdk.ApiCallback;
import gg.stardust.coresdk.ApiClient;
import gg.stardust.coresdk.ApiException;
import gg.stardust.coresdk.ApiResponse;
import gg.stardust.coresdk.Configuration;
import gg.stardust.coresdk.Pair;
import gg.stardust.coresdk.ProgressRequestBody;
import gg.stardust.coresdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import gg.stardust.coresdk.models.Empty;
import gg.stardust.coresdk.models.Error;
import gg.stardust.coresdk.models.SDPlayerCountResponse;
import gg.stardust.coresdk.models.SDPlayerCreateRequest;
import gg.stardust.coresdk.models.SDPlayerCreateResponse;
import gg.stardust.coresdk.models.SDPlayerGetAllResponses;
import gg.stardust.coresdk.models.SDPlayerGetIdResponse;
import gg.stardust.coresdk.models.SDPlayerGetIdsResponses;
import gg.stardust.coresdk.models.SDPlayerGetInventoryResponses;
import gg.stardust.coresdk.models.SDPlayerGetResponse;
import gg.stardust.coresdk.models.SDPlayerMutateRequest;
import gg.stardust.coresdk.models.SDPlayerWalletGetResponse;
import gg.stardust.coresdk.models.SDPlayerWithdrawRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlayerEndpointsApi {
    private ApiClient apiClient;

    public PlayerEndpointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlayerEndpointsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for playerCountGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playerCountGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/player/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playerCountGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = playerCountGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Player Count
     * Get Player count within a game
     * @return SDPlayerCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SDPlayerCountResponse playerCountGet() throws ApiException {
        ApiResponse<SDPlayerCountResponse> resp = playerCountGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Player Count
     * Get Player count within a game
     * @return ApiResponse&lt;SDPlayerCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SDPlayerCountResponse> playerCountGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = playerCountGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SDPlayerCountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Player Count (asynchronously)
     * Get Player count within a game
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playerCountGetAsync(final ApiCallback<SDPlayerCountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playerCountGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SDPlayerCountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playerCreatePost
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playerCreatePostCall(SDPlayerCreateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/player/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playerCreatePostValidateBeforeCall(SDPlayerCreateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling playerCreatePost(Async)");
        }
        
        com.squareup.okhttp.Call call = playerCreatePostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Player
     * Create a Player for a game. Returns their player id which can be used to reference them later in Stardust&#x27;s system
     * @param body  (required)
     * @return SDPlayerCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SDPlayerCreateResponse playerCreatePost(SDPlayerCreateRequest body) throws ApiException {
        ApiResponse<SDPlayerCreateResponse> resp = playerCreatePostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create Player
     * Create a Player for a game. Returns their player id which can be used to reference them later in Stardust&#x27;s system
     * @param body  (required)
     * @return ApiResponse&lt;SDPlayerCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SDPlayerCreateResponse> playerCreatePostWithHttpInfo(SDPlayerCreateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = playerCreatePostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<SDPlayerCreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Player (asynchronously)
     * Create a Player for a game. Returns their player id which can be used to reference them later in Stardust&#x27;s system
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playerCreatePostAsync(SDPlayerCreateRequest body, final ApiCallback<SDPlayerCreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playerCreatePostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SDPlayerCreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playerGetAllGet
     * @param start position in list (optional)
     * @param filter Find a substring within the Player unique ID field (optional)
     * @param limit maximum items returned in list (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playerGetAllGetCall(String start, String filter, String limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/player/get-all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playerGetAllGetValidateBeforeCall(String start, String filter, String limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = playerGetAllGetCall(start, filter, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get All Players
     * Get the List of All Players in Game
     * @param start position in list (optional)
     * @param filter Find a substring within the Player unique ID field (optional)
     * @param limit maximum items returned in list (optional)
     * @return SDPlayerGetAllResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SDPlayerGetAllResponses playerGetAllGet(String start, String filter, String limit) throws ApiException {
        ApiResponse<SDPlayerGetAllResponses> resp = playerGetAllGetWithHttpInfo(start, filter, limit);
        return resp.getData();
    }

    /**
     * Get All Players
     * Get the List of All Players in Game
     * @param start position in list (optional)
     * @param filter Find a substring within the Player unique ID field (optional)
     * @param limit maximum items returned in list (optional)
     * @return ApiResponse&lt;SDPlayerGetAllResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SDPlayerGetAllResponses> playerGetAllGetWithHttpInfo(String start, String filter, String limit) throws ApiException {
        com.squareup.okhttp.Call call = playerGetAllGetValidateBeforeCall(start, filter, limit, null, null);
        Type localVarReturnType = new TypeToken<SDPlayerGetAllResponses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Players (asynchronously)
     * Get the List of All Players in Game
     * @param start position in list (optional)
     * @param filter Find a substring within the Player unique ID field (optional)
     * @param limit maximum items returned in list (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playerGetAllGetAsync(String start, String filter, String limit, final ApiCallback<SDPlayerGetAllResponses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playerGetAllGetValidateBeforeCall(start, filter, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SDPlayerGetAllResponses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playerGetGet
     * @param playerId Player id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playerGetGetCall(String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/player/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (playerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("playerId", playerId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playerGetGetValidateBeforeCall(String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling playerGetGet(Async)");
        }
        
        com.squareup.okhttp.Call call = playerGetGetCall(playerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Player
     * Get Details of a Player Within a Game
     * @param playerId Player id (required)
     * @return SDPlayerGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SDPlayerGetResponse playerGetGet(String playerId) throws ApiException {
        ApiResponse<SDPlayerGetResponse> resp = playerGetGetWithHttpInfo(playerId);
        return resp.getData();
    }

    /**
     * Get Player
     * Get Details of a Player Within a Game
     * @param playerId Player id (required)
     * @return ApiResponse&lt;SDPlayerGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SDPlayerGetResponse> playerGetGetWithHttpInfo(String playerId) throws ApiException {
        com.squareup.okhttp.Call call = playerGetGetValidateBeforeCall(playerId, null, null);
        Type localVarReturnType = new TypeToken<SDPlayerGetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Player (asynchronously)
     * Get Details of a Player Within a Game
     * @param playerId Player id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playerGetGetAsync(String playerId, final ApiCallback<SDPlayerGetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playerGetGetValidateBeforeCall(playerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SDPlayerGetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playerGetIdGet
     * @param uniqueId Player&#x27;s Unique ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playerGetIdGetCall(String uniqueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/player/get-id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (uniqueId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uniqueId", uniqueId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playerGetIdGetValidateBeforeCall(String uniqueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uniqueId' is set
        if (uniqueId == null) {
            throw new ApiException("Missing the required parameter 'uniqueId' when calling playerGetIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = playerGetIdGetCall(uniqueId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Player ID
     * Get a Player&#x27;s ID via their Unique ID
     * @param uniqueId Player&#x27;s Unique ID (required)
     * @return SDPlayerGetIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SDPlayerGetIdResponse playerGetIdGet(String uniqueId) throws ApiException {
        ApiResponse<SDPlayerGetIdResponse> resp = playerGetIdGetWithHttpInfo(uniqueId);
        return resp.getData();
    }

    /**
     * Get Player ID
     * Get a Player&#x27;s ID via their Unique ID
     * @param uniqueId Player&#x27;s Unique ID (required)
     * @return ApiResponse&lt;SDPlayerGetIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SDPlayerGetIdResponse> playerGetIdGetWithHttpInfo(String uniqueId) throws ApiException {
        com.squareup.okhttp.Call call = playerGetIdGetValidateBeforeCall(uniqueId, null, null);
        Type localVarReturnType = new TypeToken<SDPlayerGetIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Player ID (asynchronously)
     * Get a Player&#x27;s ID via their Unique ID
     * @param uniqueId Player&#x27;s Unique ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playerGetIdGetAsync(String uniqueId, final ApiCallback<SDPlayerGetIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playerGetIdGetValidateBeforeCall(uniqueId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SDPlayerGetIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playerGetIdsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playerGetIdsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/player/get-ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playerGetIdsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = playerGetIdsGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get All Player IDs
     * Get All Player IDs for a Given Game
     * @return SDPlayerGetIdsResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SDPlayerGetIdsResponses playerGetIdsGet() throws ApiException {
        ApiResponse<SDPlayerGetIdsResponses> resp = playerGetIdsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get All Player IDs
     * Get All Player IDs for a Given Game
     * @return ApiResponse&lt;SDPlayerGetIdsResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SDPlayerGetIdsResponses> playerGetIdsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = playerGetIdsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SDPlayerGetIdsResponses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Player IDs (asynchronously)
     * Get All Player IDs for a Given Game
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playerGetIdsGetAsync(final ApiCallback<SDPlayerGetIdsResponses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playerGetIdsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SDPlayerGetIdsResponses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playerGetInventoryGet
     * @param playerId Player id (required)
     * @param start position in list (optional)
     * @param tokenIds Comma-Separated String of token ids (ex. &#x27;3589, 3580&#x27;) (optional)
     * @param limit maximum items returned in list (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playerGetInventoryGetCall(String playerId, String start, String tokenIds, String limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/player/get-inventory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (tokenIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tokenIds", tokenIds));
        if (playerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("playerId", playerId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playerGetInventoryGetValidateBeforeCall(String playerId, String start, String tokenIds, String limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling playerGetInventoryGet(Async)");
        }
        
        com.squareup.okhttp.Call call = playerGetInventoryGetCall(playerId, start, tokenIds, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Player Inventory
     * Get a players inventory and all the items it holds
     * @param playerId Player id (required)
     * @param start position in list (optional)
     * @param tokenIds Comma-Separated String of token ids (ex. &#x27;3589, 3580&#x27;) (optional)
     * @param limit maximum items returned in list (optional)
     * @return SDPlayerGetInventoryResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SDPlayerGetInventoryResponses playerGetInventoryGet(String playerId, String start, String tokenIds, String limit) throws ApiException {
        ApiResponse<SDPlayerGetInventoryResponses> resp = playerGetInventoryGetWithHttpInfo(playerId, start, tokenIds, limit);
        return resp.getData();
    }

    /**
     * Get Player Inventory
     * Get a players inventory and all the items it holds
     * @param playerId Player id (required)
     * @param start position in list (optional)
     * @param tokenIds Comma-Separated String of token ids (ex. &#x27;3589, 3580&#x27;) (optional)
     * @param limit maximum items returned in list (optional)
     * @return ApiResponse&lt;SDPlayerGetInventoryResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SDPlayerGetInventoryResponses> playerGetInventoryGetWithHttpInfo(String playerId, String start, String tokenIds, String limit) throws ApiException {
        com.squareup.okhttp.Call call = playerGetInventoryGetValidateBeforeCall(playerId, start, tokenIds, limit, null, null);
        Type localVarReturnType = new TypeToken<SDPlayerGetInventoryResponses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Player Inventory (asynchronously)
     * Get a players inventory and all the items it holds
     * @param playerId Player id (required)
     * @param start position in list (optional)
     * @param tokenIds Comma-Separated String of token ids (ex. &#x27;3589, 3580&#x27;) (optional)
     * @param limit maximum items returned in list (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playerGetInventoryGetAsync(String playerId, String start, String tokenIds, String limit, final ApiCallback<SDPlayerGetInventoryResponses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playerGetInventoryGetValidateBeforeCall(playerId, start, tokenIds, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SDPlayerGetInventoryResponses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playerMutatePut
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playerMutatePutCall(SDPlayerMutateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/player/mutate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playerMutatePutValidateBeforeCall(SDPlayerMutateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling playerMutatePut(Async)");
        }
        
        com.squareup.okhttp.Call call = playerMutatePutCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Mutate Player
     * Change player data
     * @param body  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty playerMutatePut(SDPlayerMutateRequest body) throws ApiException {
        ApiResponse<Empty> resp = playerMutatePutWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Mutate Player
     * Change player data
     * @param body  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> playerMutatePutWithHttpInfo(SDPlayerMutateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = playerMutatePutValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Mutate Player (asynchronously)
     * Change player data
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playerMutatePutAsync(SDPlayerMutateRequest body, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playerMutatePutValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playerRemoveDelete
     * @param playerId Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playerRemoveDeleteCall(String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/player/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (playerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("playerId", playerId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playerRemoveDeleteValidateBeforeCall(String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling playerRemoveDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = playerRemoveDeleteCall(playerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove Player
     * Removes (hides) a player from your game. This is not permanent.
     * @param playerId Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8 (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty playerRemoveDelete(String playerId) throws ApiException {
        ApiResponse<Empty> resp = playerRemoveDeleteWithHttpInfo(playerId);
        return resp.getData();
    }

    /**
     * Remove Player
     * Removes (hides) a player from your game. This is not permanent.
     * @param playerId Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8 (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> playerRemoveDeleteWithHttpInfo(String playerId) throws ApiException {
        com.squareup.okhttp.Call call = playerRemoveDeleteValidateBeforeCall(playerId, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove Player (asynchronously)
     * Removes (hides) a player from your game. This is not permanent.
     * @param playerId Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playerRemoveDeleteAsync(String playerId, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playerRemoveDeleteValidateBeforeCall(playerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playerWalletGetGet
     * @param playerId Player id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playerWalletGetGetCall(String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/player/wallet-get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (playerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("playerId", playerId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playerWalletGetGetValidateBeforeCall(String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling playerWalletGetGet(Async)");
        }
        
        com.squareup.okhttp.Call call = playerWalletGetGetCall(playerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Player Wallet
     * Get player&#x27;s wallet within a game
     * @param playerId Player id (required)
     * @return SDPlayerWalletGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SDPlayerWalletGetResponse playerWalletGetGet(String playerId) throws ApiException {
        ApiResponse<SDPlayerWalletGetResponse> resp = playerWalletGetGetWithHttpInfo(playerId);
        return resp.getData();
    }

    /**
     * Get Player Wallet
     * Get player&#x27;s wallet within a game
     * @param playerId Player id (required)
     * @return ApiResponse&lt;SDPlayerWalletGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SDPlayerWalletGetResponse> playerWalletGetGetWithHttpInfo(String playerId) throws ApiException {
        com.squareup.okhttp.Call call = playerWalletGetGetValidateBeforeCall(playerId, null, null);
        Type localVarReturnType = new TypeToken<SDPlayerWalletGetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Player Wallet (asynchronously)
     * Get player&#x27;s wallet within a game
     * @param playerId Player id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playerWalletGetGetAsync(String playerId, final ApiCallback<SDPlayerWalletGetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playerWalletGetGetValidateBeforeCall(playerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SDPlayerWalletGetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playerWithdrawPost
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playerWithdrawPostCall(SDPlayerWithdrawRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/player/withdraw";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playerWithdrawPostValidateBeforeCall(SDPlayerWithdrawRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling playerWithdrawPost(Async)");
        }
        
        com.squareup.okhttp.Call call = playerWithdrawPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Withdraw From Player
     * Withdraw a Player&#x27;s Tokens from their Stardust Wallet
     * @param body  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty playerWithdrawPost(SDPlayerWithdrawRequest body) throws ApiException {
        ApiResponse<Empty> resp = playerWithdrawPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Withdraw From Player
     * Withdraw a Player&#x27;s Tokens from their Stardust Wallet
     * @param body  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> playerWithdrawPostWithHttpInfo(SDPlayerWithdrawRequest body) throws ApiException {
        com.squareup.okhttp.Call call = playerWithdrawPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Withdraw From Player (asynchronously)
     * Withdraw a Player&#x27;s Tokens from their Stardust Wallet
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playerWithdrawPostAsync(SDPlayerWithdrawRequest body, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playerWithdrawPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
